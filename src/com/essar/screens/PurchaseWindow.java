/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.essar.screens;

import com.essar.dao.PurchaseDAO;
import com.essar.dao.StockDAO;
import com.essar.dao.SupplierDAO;
import com.essar.suggestion.SuggestionUtility;
import com.essar.utils.TableMouseListener;
import com.essar.pojos.Purchase;
import com.essar.pojos.PurchaseDetails;
import com.essar.pojos.PurchaseReturn;
import com.essar.pojos.Stock;
import com.essar.pojos.Supplier;
import com.essar.utils.ConnectionManager;
import com.essar.utils.GenericUtils;
import com.essar.utils.QueryStrings;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author rahumathulla
 */
public class PurchaseWindow extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form ProductCategory
     */
    double gSalesPercentage = 0;
    Stock stock = null;
    double gBillAmount = 0;
    double gDiscount = 0;
    double gPyableAmount = 0;
    double gBalanceAmount = 0;
    double gTotalGst = 0;
    double gSGst = 0;
    double gCGst = 0;
    double gQuantity = 0;
    double gGst12 = 0;
    double gGst18 = 0;
    double gGst5 = 0;
    double gCess = 0;
    double gStockAvailable = 0;
    //!-- 06/27/2020 Added for navigation
    long minId = 0;
    long maxId = 0;
    long currentId=0;
    long purchaseIdEdit=0;
    
    //!-- 08/09/2020 Added for updating Wholesale and Retail price through Purchase Window
    double oldWholesalePrice = 0;
    double oldRetailPrice = 0;
    
    
    HashMap map = new HashMap();
    List<PurchaseReturn> returnList = null;
    DecimalFormat df = new DecimalFormat("###.##");
    DefaultTableModel purchaseDetailsModel = null;
    public PurchaseWindow() {
        initComponents();
        initializeForm();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/tienda.png")));
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                handleClosing();
            }
        });
    }
    
    public PurchaseWindow(Purchase purchase) {
        initComponents();
        this.setBounds(40, 40, 960, 660);
        //initializeForm();
        //fetchPurchaseDataIntoTable(purchase);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        mnuPurchaseActions = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        stockDAO1 = new com.essar.dao.StockDAO();
        grpSalesType = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        mitReturn = new javax.swing.JMenuItem();
        pnlPurchase = new javax.swing.JPanel();
        lblItemName = new javax.swing.JLabel();
        lblHSNCode = new javax.swing.JLabel();
        txtHSNCode = new javax.swing.JTextField();
        txtItemName = new javax.swing.JTextField();
        spnPurchaseItems = new javax.swing.JScrollPane();
        tblPurchaseDetails = new javax.swing.JTable();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        txtRate = new javax.swing.JTextField();
        lblUnitPrice = new javax.swing.JLabel();
        lblSupplierName = new javax.swing.JLabel();
        cmbSupplierName = new javax.swing.JComboBox();
        cmdReset = new javax.swing.JButton();
        lblGst12 = new javax.swing.JLabel();
        txtGst12 = new javax.swing.JTextField();
        lblGst13 = new javax.swing.JLabel();
        txtGst18 = new javax.swing.JTextField();
        lblGst14 = new javax.swing.JLabel();
        txtGst5 = new javax.swing.JTextField();
        lblSGst = new javax.swing.JLabel();
        lblCGst = new javax.swing.JLabel();
        lblTotalGst = new javax.swing.JLabel();
        txtTotalGst = new javax.swing.JTextField();
        txtCGst = new javax.swing.JTextField();
        txtSGst = new javax.swing.JTextField();
        txtTotalAmount = new javax.swing.JTextField();
        lblSGst1 = new javax.swing.JLabel();
        lblSGst2 = new javax.swing.JLabel();
        txtDiscountAmount = new javax.swing.JTextField();
        lblInvoiceNumber = new javax.swing.JLabel();
        lblSGst3 = new javax.swing.JLabel();
        txtAmountPayable = new javax.swing.JTextField();
        radCash = new javax.swing.JRadioButton();
        radCredit = new javax.swing.JRadioButton();
        lblPaymentType = new javax.swing.JLabel();
        lblSellingPrice = new javax.swing.JLabel();
        txtPurchasePrice = new javax.swing.JTextField();
        lblgstPercentage = new javax.swing.JLabel();
        txtGstPercentage = new javax.swing.JTextField();
        lblGstAmount = new javax.swing.JLabel();
        txtGstAmount = new javax.swing.JTextField();
        txtInvoiceNumber = new javax.swing.JTextField();
        dtpPurchaseDate = new com.toedter.calendar.JDateChooser();
        lblAvailableQty = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnViewAll = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnAddMore = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        lblHSNCode1 = new javax.swing.JLabel();
        txtWholesalePrice = new javax.swing.JTextField();
        txtRetailPrice = new javax.swing.JTextField();
        lblHSNCode2 = new javax.swing.JLabel();
        lblMrp = new javax.swing.JLabel();
        txtMrp = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        mitDelete.setText("jMenuItem1");

        mitReturn.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Purchase");
        setExtendedState(6);
        setName("frmProductCategory"); // NOI18N

        lblItemName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblItemName.setText("Item Name");

        lblHSNCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblHSNCode.setText("HSN Code");

        txtHSNCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtItemName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemNameActionPerformed(evt);
            }
        });
        txtItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemNameKeyReleased(evt);
            }
        });

        spnPurchaseItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spnPurchaseItemsKeyPressed(evt);
            }
        });

        tblPurchaseDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Rate", "GST%", "GST Amt", "Qty", "Net Amount", "WholesalePrice", "RetailPrice", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPurchaseDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPurchaseDetailsMouseClicked(evt);
            }
        });
        tblPurchaseDetails.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblPurchaseDetailsKeyPressed(evt);
            }
        });
        spnPurchaseItems.setViewportView(tblPurchaseDetails);

        lblQuantity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblQuantity.setText("Quantity");

        txtQuantity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtQuantity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        txtRate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRateActionPerformed(evt);
            }
        });
        txtRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRateKeyReleased(evt);
            }
        });

        lblUnitPrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblUnitPrice.setText("Rate");

        lblSupplierName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSupplierName.setText("Supplier Name");

        cmbSupplierName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierNameActionPerformed(evt);
            }
        });
        cmbSupplierName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmbSupplierNameKeyReleased(evt);
            }
        });

        cmdReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmdReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset_small.png"))); // NOI18N
        cmdReset.setText("Reset");
        cmdReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdResetActionPerformed(evt);
            }
        });

        lblGst12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblGst12.setText("GST @ 12.0%");

        txtGst12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtGst12.setForeground(new java.awt.Color(0, 153, 153));
        txtGst12.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtGst12.setText("$$");

        lblGst13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblGst13.setText("GST @ 18.0%");

        txtGst18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtGst18.setForeground(new java.awt.Color(0, 153, 153));
        txtGst18.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtGst18.setText("$$");

        lblGst14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblGst14.setText("GST @ 5.0%");

        txtGst5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtGst5.setForeground(new java.awt.Color(0, 153, 153));
        txtGst5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtGst5.setText("$$");

        lblSGst.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSGst.setText("SGST");

        lblCGst.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblCGst.setText("CGST");

        lblTotalGst.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTotalGst.setText("Total GST");

        txtTotalGst.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtTotalGst.setForeground(new java.awt.Color(0, 153, 153));
        txtTotalGst.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalGst.setText("$$");

        txtCGst.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtCGst.setForeground(new java.awt.Color(0, 153, 153));
        txtCGst.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCGst.setText("$$");

        txtSGst.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtSGst.setForeground(new java.awt.Color(0, 153, 153));
        txtSGst.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSGst.setText("$$");

        txtTotalAmount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtTotalAmount.setForeground(new java.awt.Color(255, 102, 102));
        txtTotalAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalAmount.setText("$$");

        lblSGst1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSGst1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSGst1.setText("Total Amount");

        lblSGst2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSGst2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSGst2.setText("Discount Amount");

        txtDiscountAmount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtDiscountAmount.setForeground(new java.awt.Color(153, 153, 0));
        txtDiscountAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDiscountAmount.setText("$$");
        txtDiscountAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiscountAmountActionPerformed(evt);
            }
        });

        lblInvoiceNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblInvoiceNumber.setText("Invoice Number:");

        lblSGst3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSGst3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSGst3.setText("Amount Payable");

        txtAmountPayable.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        txtAmountPayable.setForeground(new java.awt.Color(102, 102, 255));
        txtAmountPayable.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtAmountPayable.setText("$$");

        grpSalesType.add(radCash);
        radCash.setText("Cash");
        radCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radCashActionPerformed(evt);
            }
        });

        grpSalesType.add(radCredit);
        radCredit.setText("Credit");

        lblPaymentType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPaymentType.setForeground(new java.awt.Color(0, 102, 51));
        lblPaymentType.setText("Payment Type :");

        lblSellingPrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSellingPrice.setText("Total Pur.Price");

        txtPurchasePrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPurchasePrice.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtPurchasePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPurchasePriceActionPerformed(evt);
            }
        });
        txtPurchasePrice.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtPurchasePricePropertyChange(evt);
            }
        });
        txtPurchasePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPurchasePriceKeyReleased(evt);
            }
        });

        lblgstPercentage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblgstPercentage.setText("GST%");

        txtGstPercentage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtGstPercentage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtGstPercentage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGstPercentageActionPerformed(evt);
            }
        });

        lblGstAmount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblGstAmount.setText("GST Amt");

        txtGstAmount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtGstAmount.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtGstAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGstAmountActionPerformed(evt);
            }
        });

        txtInvoiceNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtInvoiceNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInvoiceNumberKeyPressed(evt);
            }
        });

        dtpPurchaseDate.setDateFormatString("dd/MM/yyyy");

        lblAvailableQty.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAvailableQty.setForeground(new java.awt.Color(102, 102, 255));
        lblAvailableQty.setText("00");

        lblDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDate.setText("Date:");

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png"))); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnSearch.setMnemonic('e');
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnViewAll.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnViewAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/viewall.png"))); // NOI18N
        btnViewAll.setMnemonic('V');
        btnViewAll.setText("View All");
        btnViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.png"))); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/next.png"))); // NOI18N
        btnNext.setMnemonic('x');
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/previous.png"))); // NOI18N
        btnPrevious.setMnemonic('r');
        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnAddMore.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnAddMore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png"))); // NOI18N
        btnAddMore.setMnemonic('S');
        btnAddMore.setText("More");

        btnReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        btnReset.setMnemonic('R');
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        lblHSNCode1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblHSNCode1.setText("W.Price");

        txtWholesalePrice.setBackground(new java.awt.Color(204, 255, 204));
        txtWholesalePrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtWholesalePrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txtRetailPrice.setBackground(new java.awt.Color(255, 204, 204));
        txtRetailPrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtRetailPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtRetailPrice.setMaximumSize(new java.awt.Dimension(6, 21));

        lblHSNCode2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblHSNCode2.setText("R.Price");

        lblMrp.setText("MRP");

        txtMrp.setMaximumSize(new java.awt.Dimension(6, 20));

        javax.swing.GroupLayout pnlPurchaseLayout = new javax.swing.GroupLayout(pnlPurchase);
        pnlPurchase.setLayout(pnlPurchaseLayout);
        pnlPurchaseLayout.setHorizontalGroup(
            pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                .addComponent(txtInvoiceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDate)
                                    .addComponent(dtpPurchaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblPaymentType, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radCash)
                                .addGap(18, 18, 18)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radCredit)
                                    .addComponent(cmdReset)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblHSNCode, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHSNCode, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblUnitPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                                    .addComponent(txtRate))
                                .addGap(18, 18, 18)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblgstPercentage)
                                    .addComponent(txtGstPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtGstAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblGstAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblSellingPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                    .addComponent(txtPurchasePrice))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMrp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(txtMrp, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 20, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtWholesalePrice)
                                    .addComponent(lblHSNCode1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblHSNCode2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRetailPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(lblAvailableQty, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33))))
                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                        .addComponent(lblInvoiceNumber)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(lblGst14, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtGst5))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(lblGst13, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtGst18))
                                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(lblGst12, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtGst12, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(37, 37, 37)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(lblTotalGst, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTotalGst))
                                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(lblCGst, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCGst))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(lblSGst, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSGst, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAddMore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(btnPrevious)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)))
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblSGst1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSGst2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSGst3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtDiscountAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                                .addComponent(txtTotalAmount, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(txtAmountPayable, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(spnPurchaseItems))
                .addContainerGap())
        );
        pnlPurchaseLayout.setVerticalGroup(
            pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                        .addComponent(lblInvoiceNumber)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmdReset)
                            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblPaymentType)
                                    .addComponent(radCash)
                                    .addComponent(radCredit))
                                .addGap(63, 63, 63))))
                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDate)
                            .addComponent(lblSupplierName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dtpPurchaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtInvoiceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(lblItemName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblQuantity)
                                            .addComponent(lblAvailableQty))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                                            .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(lblHSNCode2)
                                                .addComponent(lblHSNCode1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtRetailPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtWholesalePrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(txtHSNCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtGstPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtGstAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblHSNCode, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblgstPercentage)
                                        .addComponent(lblUnitPrice))
                                    .addComponent(lblGstAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblSellingPrice)
                                    .addComponent(lblMrp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPurchasePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMrp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(18, 18, 18)
                .addComponent(spnPurchaseItems, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblSGst1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtTotalAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDiscountAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                            .addComponent(lblSGst2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSGst3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAmountPayable, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(110, 110, 110))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAddMore, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50))))
                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGst12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGst12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtSGst, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblSGst, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGst13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGst18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCGst, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCGst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGst14, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGst5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotalGst, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotalGst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlPurchase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlPurchase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(26, 26, 26))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        initializeForm();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        try{

            if(currentId-1 >= minId){
                currentId = currentId -1;
                PurchaseDAO purchaseDAO = new PurchaseDAO();
                fetchPurchaseDataIntoTable(purchaseDAO.retrieveByPurchasId(currentId));
            }else{
                JOptionPane.showMessageDialog(null, "No more record before.");
            }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Reached at the beginning.");
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        try{

            if(currentId+1 <= maxId){
                currentId = currentId +1;
                PurchaseDAO purchaseDAO = new PurchaseDAO();
                fetchPurchaseDataIntoTable(purchaseDAO.retrieveByPurchasId(currentId));
            }else{
                JOptionPane.showMessageDialog(null, "No more record after.");
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Reached at the end.");
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        handleClosing();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllActionPerformed
        // TODO add your handling code here:
        this.dispose();
        QueryStrings.viewPurchaseSql =  "SELECT p.purchase_id"
        + ", sup.supplier_name"
        + ", p.bill_number"
        + ", SUM(d.quantity)"
        + ", p.bill_amount"
        + ", p.discount"
        + ", p.payable_amount"
        + ", p.purchase_date"
        + ", p.status  "
        + " from purchase p JOIN supplier sup ON p.supplier_id = sup.supplier_id"
        + " JOIN purchase_details d ON p.purchase_id = d.purchase_id "
        + " group by purchase_id order by purchase_id DESC";
        ViewPurchase purchaseView =  new ViewPurchase();
        //purchaseView.setSize(800, 520);
        purchaseView.setVisible(true);
    }//GEN-LAST:event_btnViewAllActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        /*try{
            String billNumber = JOptionPane.showInputDialog(this, " Please enter the invoice/bill number.");
            System.out.println("Bill Number = "+billNumber);
            if(null == billNumber || "".equalsIgnoreCase(billNumber.trim())){
                JOptionPane.showMessageDialog(this, "No Data found!");
            }else{
                PurchaseDAO purchaseDAO = new PurchaseDAO();
                fetchPurchaseDataIntoTable(purchaseDAO.retrieveByBillNumber(billNumber));
            }
        }catch(Exception e){
            System.out.println("Invalid Bill Number");
        }*/
        PurchaseFind purchaseFind =  new PurchaseFind();
        purchaseFind.setBounds(60, 60, 630, 360);
        purchaseFind.setVisible(true);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(btnSave.getText().equalsIgnoreCase("new")){
            /*PricingTierDAO pricingTierDAO = new PricingTierDAO();
            renderDataIntoDropDown(pricingTierDAO.retrieveAll());*/
            purchaseIdEdit = 0;
            SupplierDAO supplierDAO = new SupplierDAO();
            renderSupplierDataIntoDropDown(supplierDAO.retrieveAll());
            /*SalesDAO billGenDAO =  new SalesDAO();
            txtBillNumber.setText(billGenDAO.generateBillNumber()+"");
            ((DefaultTableModel)tblSalesDetails.getModel()).setNumRows(0); */
            btnSave.setText("Save");
            btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
            enableFormElements(true);
            if(null==dtpPurchaseDate.getDate()){
                dtpPurchaseDate.setDate(new Date());
            }
            SuggestionUtility.populateItemNames(this, txtItemName);
            txtInvoiceNumber.requestFocus();
        }else if(btnSave.getText().equalsIgnoreCase("save")){
            //Implement Save Logic
            if(validatePurchaseDetails()){
                savePurchaseForm();
                initializeForm();
            }

        }else if(btnSave.getText().equalsIgnoreCase("update")){

            updatePurchaseAfterReturn(returnList);
            initializeForm();
            /*this.dispose();
            SalesWindow salesWindow = new SalesWindow();
            salesWindow.setBounds(100, 60, 960, 590);
            salesWindow.setVisible(true);*/

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtGstAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGstAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGstAmountActionPerformed

    private void txtGstPercentageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGstPercentageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGstPercentageActionPerformed

    private void txtPurchasePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPurchasePriceActionPerformed
        // TODO add your handling code here:
        txtQuantity.requestFocus();
    }//GEN-LAST:event_txtPurchasePriceActionPerformed

    private void radCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radCashActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radCashActionPerformed

    private void txtDiscountAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiscountAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiscountAmountActionPerformed

    private void cmdResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdResetActionPerformed
        // TODO add your handling code here:
        clearItemFields();
    }//GEN-LAST:event_cmdResetActionPerformed

    private void cmbSupplierNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSupplierNameKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()== KeyEvent.VK_ENTER || evt.getKeyCode()== KeyEvent.VK_TAB){
            txtItemName.requestFocus();
        }
    }//GEN-LAST:event_cmbSupplierNameKeyReleased

    private void cmbSupplierNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierNameActionPerformed
        // TODO add your handling code here:
        /* gSalesPercentage = ((PricingTier)(cmbSupplierName.getSelectedItem())).getPricingPercentage();
        System.out.println("-----"+gSalesPercentage);*/
    }//GEN-LAST:event_cmbSupplierNameActionPerformed

    private void txtRateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRateKeyReleased
        // TODO add your handling code here:
        try{
            if(txtPurchasePrice.isVisible()){
                //calculateSuggestions();
                double itemRate = Double.parseDouble(txtRate.getText());
                double itemGst = GenericUtils.roundDouble((stock.getGstPercentage()* itemRate/100),2);
                double pricePostGst = itemRate+itemGst;
                txtGstAmount.setText(itemGst+"");
                txtPurchasePrice.setText(df.format(pricePostGst));
            }
        }catch(Exception e){
            txtPurchasePrice.setText(null);
        }
    }//GEN-LAST:event_txtRateKeyReleased

    private void txtRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRateActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
        if(validateForm()){
            renderPurchaseDataIntoTable(stock);
            clearItemFields();
            txtItemName.requestFocus();
        }
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void spnPurchaseItemsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnPurchaseItemsKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_spnPurchaseItemsKeyPressed

    private void tblPurchaseDetailsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblPurchaseDetailsKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()== KeyEvent.VK_HOME && tblPurchaseDetails.getRowCount()>0){
            /*mitDelete = new JMenuItem("Delete");
            mitDelete.addActionListener(this);
            mnuPurchaseActions.add(mitDelete);*/

            mitReturn = new JMenuItem("Return");
            mitReturn.addActionListener(this);
            mnuPurchaseActions.add(mitReturn);

        }
    }//GEN-LAST:event_tblPurchaseDetailsKeyPressed

    private void tblPurchaseDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPurchaseDetailsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblPurchaseDetailsMouseClicked

    private void txtItemNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNameKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            System.out.println("---inside item name change");
            try{
                populateItemDetails();
            }
            catch(Exception e){
                System.out.println("Error Retireving the item -"+e.getMessage());
            }
        }
    }//GEN-LAST:event_txtItemNameKeyReleased

    private void txtItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemNameActionPerformed
        // TODO add your handling code here:
        try{
            populateItemDetails();
        }
        catch(Exception e){
            System.out.println("Error Retrieving the item -"+e.getMessage());
        }
    }//GEN-LAST:event_txtItemNameActionPerformed

    private void txtPurchasePriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPurchasePriceKeyReleased
        // TODO add your handling code here:
        try{
            if(txtRate.isVisible()){
                //calculateSuggestions();
                double itemPurchasePrice = Double.parseDouble(txtPurchasePrice.getText());
                double gstPercentage = Double.parseDouble(txtGstPercentage.getText());
                        //GenericUtils.roundDouble((stock.getGstPercentage()* itemRate/100),2);
                double priceBeforeGst = GenericUtils.roundDouble(itemPurchasePrice/(1+gstPercentage*0.01),2);                
                txtRate.setText(priceBeforeGst+"");
                txtGstAmount.setText(GenericUtils.roundDouble((stock.getGstPercentage()* priceBeforeGst/100),2)+"");
            }
        }catch(Exception e){
            txtRate.setText(null);
        }
    }//GEN-LAST:event_txtPurchasePriceKeyReleased

    private void txtPurchasePricePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtPurchasePricePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPurchasePricePropertyChange

    private void txtInvoiceNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInvoiceNumberKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            txtItemName.requestFocus();
        }
    }//GEN-LAST:event_txtInvoiceNumberKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchaseWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchaseWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchaseWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchaseWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PurchaseWindow().setVisible(true);
            }
        });
    }
    
    public void initializeForm(){
        btnAddMore.setVisible(false);
        btnSave.setText("New");
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png")));
        btnSave.requestFocus();
        txtHSNCode.setText("");
        txtItemName.setText("");
        //txtSupplierRating.setText("");
        txtQuantity.setText("");
        //txtSupplierAddress.setText("");
        txtGst12.setText("0.0");
        txtGst18.setText("0.0");
        txtGst5.setText("0.0");
        txtSGst.setText("0.0");
        txtCGst.setText("0.0");
        txtTotalGst.setText("0.0");
        txtTotalAmount.setText("0.0");
        txtDiscountAmount.setText("0.0");
        txtAmountPayable.setText("0.0");
        //txtCess.setText("0.0");
        radCash.setSelected(true);
        cmbSupplierName.removeAllItems();
        //txtBillNumber.setText("10021");
        
        
        enableFormElements(false);
        
        mnuPurchaseActions = new JPopupMenu();
        mitDelete = new JMenuItem("Remove");
        mitDelete.addActionListener(this);
        
        mnuPurchaseActions.add(mitDelete);
         // sets the popup menu for the table
        tblPurchaseDetails.setComponentPopupMenu(mnuPurchaseActions);      
        tblPurchaseDetails.addMouseListener(new TableMouseListener(tblPurchaseDetails));
        
        TableColumn idColumn = tblPurchaseDetails.getColumnModel().getColumn(tblPurchaseDetails.getColumnCount()-1);
        idColumn.setPreferredWidth(0);
        idColumn.setMinWidth(0);
        idColumn.setMaxWidth(0);
        
        TableColumn itemColumn = tblPurchaseDetails.getColumnModel().getColumn(tblPurchaseDetails.getColumnCount()-2);
        itemColumn.setPreferredWidth(0);
        itemColumn.setMinWidth(0);
        itemColumn.setMaxWidth(0);
        
        TableColumn itemNameColumn = tblPurchaseDetails.getColumnModel().getColumn(1);
        itemNameColumn.setPreferredWidth(400);
        itemNameColumn.setMinWidth(400);
        itemNameColumn.setMaxWidth(400);
        
        PurchaseDAO navigationDAO =  new PurchaseDAO();
        List<Long> idMaxMin = navigationDAO.getMaxAndMinIds();
        minId = idMaxMin.get(0);
        maxId = idMaxMin.get(1);
        //currentId = maxId;
        
        tblPurchaseDetails.removeAll();
        tblPurchaseDetails.repaint();
        DefaultTableModel model = (DefaultTableModel) tblPurchaseDetails.getModel();
        model.setRowCount(0);
   
    }
    
    public void enableFormElements(boolean flag){
        txtInvoiceNumber.setEnabled(flag);
        txtHSNCode.setEnabled(flag);
        txtItemName.setEnabled(flag);
        txtQuantity.setEnabled(flag);
        txtRate.setEnabled(flag);
        txtPurchasePrice.setEnabled(flag);
        txtGstPercentage.setEnabled(flag);
        txtGstAmount.setEnabled(flag);
        dtpPurchaseDate.setEnabled(flag);
        txtRetailPrice.setEnabled(flag);
        txtWholesalePrice.setEnabled(flag);
        txtMrp.setEnabled(flag);
        
    }
    public boolean validateForm(){
        //btnSave.setText("Add");
        //btnSave.requestFocus();
        /*if(gStockAvailable < Double.parseDouble(txtQuantity.getText())){
            int choice = JOptionPane.showConfirmDialog(null, "This item is out of stock, are you sure to continue with Billing?");
            System.out.println("choice--"+choice);
            if(choice==0)
                return true;
            else 
                return false;
        }*/
        if(cmbSupplierName.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null, "Please choose a customer type");
            cmbSupplierName.requestFocus();
            return false;
        }
        
        if(null == txtItemName.getText()){
            JOptionPane.showMessageDialog(null, "Please give the item name.");
            txtItemName.requestFocus();
            return false;
        }
        if(null == txtHSNCode.getText() || !(txtHSNCode.getText().matches("\\w+"))){
            JOptionPane.showMessageDialog(null, "HSN Code  "+txtHSNCode.getText() +" is not valid.");
            txtHSNCode.requestFocus();
            return false;
        }
        if(null == txtQuantity.getText() || !(txtQuantity.getText().matches("\\d+"))){
            JOptionPane.showMessageDialog(null, "Quantity "+txtQuantity.getText() +" is not valid.");
            txtQuantity.requestFocus();
            return false;
        }      
     
        //txtProductCategoryName.setText("");
        return true;
    }
    
    public boolean validatePurchaseDetails(){
        //btnSave.setText("Add");
        //btnSave.requestFocus();
        
        
        if(null == txtInvoiceNumber.getText() || (txtInvoiceNumber.getText().equalsIgnoreCase(""))){
            JOptionPane.showMessageDialog(null, "Please enter purchase invoice/bill number");
            return false;
        }
        
        else if(cmbSupplierName.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null, "Please choose the supplier name");
            return false;
        }
        /*if(null == txtQuantity.getText() || !(txtQuantity.getText().matches("\\d+"))){
            JOptionPane.showMessageDialog(null, "Quantity "+txtQuantity.getText() +" is not valid.");
            return false;
        }*/
        else if(tblPurchaseDetails.getRowCount()<1){
            JOptionPane.showMessageDialog(null, "Please enter the item details.");
            txtItemName.requestFocus();
            return false;
        }
        
        else if(!(txtInvoiceNumber.getText().trim().equals(""))){
            
            PurchaseDAO purchaseDAO = new PurchaseDAO();
            Purchase purchase = purchaseDAO.retrieveByBillNumber(txtInvoiceNumber.getText().trim());
            if(purchase!=null){
                JOptionPane.showMessageDialog(null, "The invoice/bill number already exists.");
                return false;
            }
        }        
        
     
        //txtProductCategoryName.setText("");
        return true;
    }
    
    public void populateItemDetails(){
        StockDAO stockDAO = null;
        //Stock
        stock = null;
        double dUnitGst=0.0;
        //double dUnitSellingPrice=0.0;
        double dUnitDiscount=0.0;
        double dUnitPostGstPrice=0.0;
        
        if(!txtItemName.getText().equalsIgnoreCase(""))
        stockDAO = new StockDAO();
        stock = stockDAO.retrieveByName(txtItemName.getText().trim());
        txtHSNCode.setText(stock.getHsnCode());
        //txtRate.setText(stock.getPurchasePrice()+"");
        oldWholesalePrice = 0;
        oldRetailPrice = 0;
        oldWholesalePrice = stock.getWholesalePrice();
        oldRetailPrice = stock.getSellingPrice();
        
        txtWholesalePrice.setText(stock.getWholesalePrice()+"");
        txtRetailPrice.setText(stock.getSellingPrice()+"");
        txtMrp.setText(stock.getMrp()+"");
        //txtSellingPrice.setText(stock.getSellingPrice());
        //txtSellingPrice.setText(stock.getSellingPrice());
        
        //GST Amount Calculation
        txtGstPercentage.setText(stock.getGstPercentage()+"");
        dUnitGst = stock.getGstPercentage()*stock.getPurchasePrice()/100;
        txtGstAmount.setText(df.format(dUnitGst)+"");
        //txt.setText(df.format(dUnitGst)+"");
        
        //Price after Tax calculation
        dUnitPostGstPrice = dUnitGst + stock.getPurchasePrice();
        
        //Discount calculation
        if(stock.getMrp()>0){
            
        }
        //dUnitDiscount = Double.parseDouble(stock.getDiscount())*Double.parseDouble(stock.getPurchasePrice())/100;
        
        //Selling Price calculation
        //dUnitSellingPrice = dUnitPostGstPrice + dUnitPostGstPrice*stock.getMargin()/100;
        //txtPurchasePrice.setText(df.format(dUnitPostGstPrice)+"");
        txtPurchasePrice.setText(stock.getPurchasePrice()+"");
        //Stock Availability Check
        gStockAvailable = stock.getQuantity();
        lblAvailableQty.setText(gStockAvailable+"");
        txtHSNCode.setEnabled(false);
        txtGstPercentage.setEnabled(false);
        txtGstAmount.setEnabled(false);
        txtRate.setEnabled(true);
        //txtQuantity.setText("1");
        txtQuantity.requestFocus();
        
        //=Aug 7, 2020-- Change for dynamically deriving item Rate from Purchase price in Purchase Window
        double itemPurchasePrice = Double.parseDouble(txtPurchasePrice.getText());
        double gstPercentage = Double.parseDouble(txtGstPercentage.getText());                        
        double priceBeforeGst = GenericUtils.roundDouble(itemPurchasePrice/(1+gstPercentage*0.01),2);                
        txtRate.setText(priceBeforeGst+"");
        txtGstAmount.setText(GenericUtils.roundDouble((stock.getGstPercentage()* priceBeforeGst/100),2)+"");
        //#####
    }
    
        
    public void savePurchaseForm(){

        PurchaseDAO billGenDAO =  new PurchaseDAO();
        Purchase purchase = new Purchase();
        purchase.setBillNumber(txtInvoiceNumber.getText());
        purchase.setPurchaseDate(dtpPurchaseDate.getDate());
        /*Customer customer = (Customer)cmbCustomerName.getSelectedItem();
        sales.setCustomerId(customer.getId());*/
        Supplier supplier = (Supplier)cmbSupplierName.getSelectedItem();
        System.out.println("----"+purchase.getBillNumber());
        purchase.setSupplierId(supplier.getSupplierId());
        purchase.setBillAmount(Double.parseDouble(txtTotalAmount.getText()));
        purchase.setDiscount(Double.parseDouble(txtDiscountAmount.getText()));
        purchase.setPayableAmount(Double.parseDouble(txtAmountPayable.getText()));
        purchase.setTotalGst(Double.parseDouble(txtTotalGst.getText()));
        purchase.setSgst(Double.parseDouble(txtSGst.getText()));
        purchase.setCgst(Double.parseDouble(txtCGst.getText()));
        purchase.setGstAt12(Double.parseDouble(txtGst12.getText()));
        purchase.setGstAt18(Double.parseDouble(txtGst18.getText()));
        purchase.setGstAt30(Double.parseDouble(txtGst5.getText()));
        //purchase.setCess(Double.parseDouble(txtCess.getText()));
        System.out.println("Cess---"+purchase.getCess());
        //purchase.setPurchaseDate(Calendar.getInstance().getTime());
        if(radCash.isSelected())
            purchase.setStatus("Paid");
        else
            purchase.setStatus("Credit");
        purchase.setCreateTS(Calendar.getInstance().getTime());
        purchase.setUpdateTS(Calendar.getInstance().getTime());
        
        PurchaseDetails purchaseDetails = null;
        List<PurchaseDetails> purchaseDetailsList =  new ArrayList<>();
        for(int i=0;i<purchaseDetailsModel.getRowCount();i++){
            purchaseDetails = new PurchaseDetails();
            purchaseDetails.setHsnCode(purchaseDetailsModel.getValueAt(i, 0).toString());
            purchaseDetails.setItemName(purchaseDetailsModel.getValueAt(i, 1).toString());
            purchaseDetails.setUnitPrice(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 2).toString()));
            purchaseDetails.setGstPercentage(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 3).toString()));
            purchaseDetails.setGstAmount(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 4).toString()));
            purchaseDetails.setQuantity(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 5).toString()));
            purchaseDetails.setNetAmount(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 6).toString()));
            purchaseDetails.setDiscount(0.0);
            purchaseDetails.setGrossAmount(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 6).toString()));
            purchaseDetails.setWholesalePrice(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 7).toString()));
            purchaseDetails.setRetailPrice(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 8).toString()));
            purchaseDetails.setItemId(Long.parseLong(purchaseDetailsModel.getValueAt(i, 9).toString()));
            purchaseDetailsList.add(purchaseDetails);
        }         
        purchase.setPurchaseDetails(purchaseDetailsList);
        PurchaseDAO purchaseDAO =  new PurchaseDAO();
        for(int i=0; i<map.size();i++){
            System.out.println("--key :: "+map.keySet());
            System.out.println("--value :: "+map.values());
        }
        purchaseDAO.insertIntoDB(purchase);
        
    }
    
    public void updatePurchaseAfterReturn(List<PurchaseReturn> returnList){

        //SalesDAO billGenDAO =  new SalesDAO();
        //!@-- 03/15/2020
        deriveValuesFromPurchaseInput();
        
        Purchase purchase = new Purchase();
        purchase.setBillNumber(txtInvoiceNumber.getText());
        purchase.setPurchaseDate(dtpPurchaseDate.getDate());
        /*Customer customer = (Customer)cmbCustomerName.getSelectedItem();
        sales.setCustomerId(customer.getCustomerId());*/
        System.out.println("Update----"+purchase.getBillNumber());
        purchase.setBillAmount(Double.parseDouble(txtTotalAmount.getText()));
        purchase.setDiscount(Double.parseDouble(txtDiscountAmount.getText()));
        purchase.setPayableAmount(Double.parseDouble(txtAmountPayable.getText()));
        purchase.setTotalGst(Double.parseDouble(txtTotalGst.getText()));
        purchase.setSgst(Double.parseDouble(txtSGst.getText()));
        purchase.setCgst(Double.parseDouble(txtCGst.getText()));
        purchase.setGstAt12(Double.parseDouble(txtGst12.getText()));
        purchase.setGstAt18(Double.parseDouble(txtGst18.getText()));
        //purchase.setGstAt28(Double.parseDouble(txtGst28.getText()));
        purchase.setGstAt30(Double.parseDouble(txtGst5.getText()));
        //purchase.setCess(Double.parseDouble(txtCess.getText()));

        
        //!@-- Amount in Words change 13/03/2020
        //String sPayableAmount = Math.round(sales.getBillAmount())+"";
        //String intPart = sPayableAmount.substring(0, sPayableAmount.indexOf("."));
        //System.out.println("--Int Part :: "+intPart);
        //sales.setAmountInWords("Rupees "+GenericUtils.numberToWord(Integer.parseInt(sPayableAmount))+" Only");
        //sales.setPayableAmount(Math.round(sales.getBillAmount()));
        //sales.setRoundOff(Math.round(sales.getBillAmount())-sales.getBillAmount());
        //System.out.println("--Amount in Words :: "+sales.getAmountInWords());
        //sales.setTaxableAt5(gTaxableAt5);
        //sales.setTaxableAt12(gTaxableAt12);
        //sales.setTaxableAt18(gTaxableAt18);
        //sales.setTaxableAt0(gTaxableAt0);
        //sales.setTaxableAt28(gTaxableAt28);
        //System.out.println("Cess---"+sales.getCess());
        
        
        if(radCash.isSelected())
            purchase.setStatus("Paid");
        else
            purchase.setStatus("Credit");
        
        //For handling more line items after on top of existing Bill
        PurchaseDetails purchaseDetails = null;
        List<PurchaseDetails> moreItemsList =  new ArrayList<PurchaseDetails>();
        for(int i=0;i<purchaseDetailsModel.getRowCount();i++){//Newly added items logic
            if(purchaseDetailsModel.getValueAt(i, purchaseDetailsModel.getRowCount()-1)==null){
                System.out.println("--!@#"+purchaseDetailsModel.getValueAt(i, 1).toString());
                purchaseDetails = new PurchaseDetails();
                purchaseDetails.setHsnCode(purchaseDetailsModel.getValueAt(i, 0).toString());
                purchaseDetails.setItemName(purchaseDetailsModel.getValueAt(i, 1).toString());
                purchaseDetails.setGstPercentage(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 3).toString()));
                purchaseDetails.setGstAmount(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 4).toString()));
                purchaseDetails.setUnitPrice(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 2).toString()));
                purchaseDetails.setQuantity(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 5).toString()));
                purchaseDetails.setNetAmount(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 6).toString()));
                purchaseDetails.setDiscount(0.0);
                purchaseDetails.setGrossAmount(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 6).toString()));
                purchaseDetails.setWholesalePrice(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 7).toString()));
                purchaseDetails.setRetailPrice(Double.parseDouble(purchaseDetailsModel.getValueAt(i, 8).toString()));
                purchaseDetails.setItemId(Long.parseLong(purchaseDetailsModel.getValueAt(i, 9).toString()));
                moreItemsList.add(purchaseDetails);
            }
        }       
        purchase.setPurchaseDetails(moreItemsList); 
        PurchaseDAO purchaseDAO =  new PurchaseDAO();
        for(int i=0; i<map.size();i++){
            System.out.println("--key :: "+map.keySet());
            System.out.println("--value :: "+map.values());
        }
        System.out.println(" moreItemsList :"+moreItemsList.size());
        purchaseDAO.updatePurchaseAfterReturn(purchase,returnList);
        
    }
    
    public void renderDataIntoTable(List<Supplier> supplierList){
        DefaultTableModel supplierModel = null;
        supplierModel = (DefaultTableModel) tblPurchaseDetails.getModel();
        System.out.println("-----"+supplierList.size());
        for(int i=0;i<supplierList.size();i++){
        supplierModel.addRow(new Object[]{supplierList.get(i).getSupplierCode(),supplierList.get(i).getSupplierName(),supplierList.get(i).getSupplierContactNumber(), supplierList.get(i).getSupplierRating(), supplierList.get(i).getSupplierAddress()});
        //model.
        }        
        
    }
    
   
    public void renderSupplierDataIntoDropDown(List<Supplier> supplierList){
        Supplier supplier = null;
        if(supplierList!= null){
            for(int i=0; i<supplierList.size();i++){
                cmbSupplierName.addItem(supplierList.get(i));
            }
            cmbSupplierName.setSelectedIndex(0);
            supplier = (Supplier)cmbSupplierName.getSelectedItem();
            //cmbCustomerType.gets
            System.out.println("----------"+cmbSupplierName.getSelectedItem()+"::"+supplier.getSupplierName());
        }
    }
    
    public void renderPurchaseDataIntoTable(Stock stock){
       
        
        purchaseDetailsModel = (DefaultTableModel) tblPurchaseDetails.getModel();
        TableColumn idColumn = tblPurchaseDetails.getColumnModel().getColumn(tblPurchaseDetails.getColumnCount()-1);
        idColumn.setPreferredWidth(0);
        idColumn.setMaxWidth(0);
        
        TableColumn nameColumn = tblPurchaseDetails.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);
        
        //double itemAmount = (Double.parseDouble(stock.getSellingPrice())*gSalesPercentage)/100;
        double itemAmount = (stock.getSellingPrice()*gSalesPercentage)/100;
        double dBasingPercentage = (1+stock.getGstPercentage()/100);
        System.out.println("Pricing Percent --"+dBasingPercentage);
        double dBasePrice = Double.parseDouble(txtPurchasePrice.getText())/dBasingPercentage;
        double dDerivedGst = dBasePrice * stock.getGstPercentage()/100;
        map.put(stock.getItemId(), Double.parseDouble(txtQuantity.getText()));
        gStockAvailable = 0;
        int option =0;
        if(oldRetailPrice > Double.parseDouble(txtRetailPrice.getText()) 
                || oldWholesalePrice > Double.parseDouble(txtWholesalePrice.getText())){
                String[] buttonLabels = new String[] {"Yes", "No"};
                String defaultOption = buttonLabels[0];
                Icon icon = null;    
                option= JOptionPane.showOptionDialog(this,
                "Retail/Wholesale Price is less than existing price.\n"
                        + " Are you sure to go with new price?",
                "Warning",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE,
                icon,
                buttonLabels,
                defaultOption);                            
        }
        System.out.println("COnfirm Option--"+option);
        if(option!=0){
            txtQuantity.requestFocus();
            txtWholesalePrice.setText(oldWholesalePrice+"");
            txtRetailPrice.setText(oldRetailPrice+"");
        }
        if(purchaseDetailsModel != null){
        purchaseDetailsModel.addRow(new Object[]{stock.getHsnCode()
                , stock.getItemName()
                , df.format(dBasePrice)
                , stock.getGstPercentage()
                , df.format(dDerivedGst * Double.parseDouble(txtQuantity.getText()))
                , Double.parseDouble(txtQuantity.getText())
                , df.format((dBasePrice+dDerivedGst) * Double.parseDouble(txtQuantity.getText()))
                , txtWholesalePrice.getText()
                , txtRetailPrice.getText()
                , stock.getItemId()});
        //model.
                
        } 
        deriveValuesFromPurchaseInput();
    }
    
    public final void fetchPurchaseDataIntoTable(Purchase purchase){
        System.out.println("--Called fetchPurchaseDataIntoTable"+purchase.getPurchaseDetails().size());
        //initializeForm();
        //enableFormElements(true);
        tblPurchaseDetails.removeAll();
        tblPurchaseDetails.repaint();
        DefaultTableModel model = (DefaultTableModel) tblPurchaseDetails.getModel();
        model.setRowCount(0);
        
        //09/03/2020
        purchaseIdEdit = purchase.getPurchaseId();
        currentId = purchase.getPurchaseId();
        btnSave.setText("Update");
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png")));
        //btnAddMore.setVisible(true);
        dtpPurchaseDate.setEnabled(true);
        mnuPurchaseActions.removeAll();
        
        //CORRECTION NEEDED FOR RETURN LOGIC
        /*mitReturn = new JMenuItem("Return");
        mitReturn.addActionListener(this); 
        mnuPurchaseActions.add(mitReturn);*/
        
        
        returnList =new ArrayList<PurchaseReturn>();       
     
        //mnuPurchaseActions.remove(mitDelete);
        System.out.println("!@#-------//"+purchase.getPurchaseDate());
        dtpPurchaseDate.setDate(purchase.getPurchaseDate());
        
        txtInvoiceNumber.setText(purchase.getBillNumber()+"");
        //dtpPurchaseDate.setDate(purchase.getPurchaseDate());
        txtTotalAmount.setText(purchase.getBillAmount()+"");
        txtDiscountAmount.setText(purchase.getDiscount()+"");
        txtAmountPayable.setText(purchase.getPayableAmount()+"");
        txtTotalGst.setText(purchase.getTotalGst()+"");
        txtSGst.setText(purchase.getSgst()+"");
        txtCGst.setText(purchase.getCgst()+"");
        txtGst12.setText(purchase.getGstAt12()+"");
        txtGst18.setText(purchase.getGstAt18()+"");
        txtGst5.setText(purchase.getGstAt30()+"");
        //txtCess.setText(purchase.getCess()+"");
        //txtCess.setText("0.0");
        if(purchase.getStatus().equals("Paid"))
            radCash.setSelected(true);
        else
            radCredit.setSelected(true);
        
        purchase.setSgst(Double.parseDouble(txtSGst.getText()));
        purchase.setCgst(Double.parseDouble(txtCGst.getText()));
        purchase.setGstAt12(Double.parseDouble(txtGst12.getText()));
        purchase.setGstAt18(Double.parseDouble(txtGst18.getText()));
        purchase.setGstAt30(Double.parseDouble(txtGst5.getText()));
        //purchase.setCess(Double.parseDouble(txtCess.getText()));
        List<PurchaseDetails> purchaseDetailsList = purchase.getPurchaseDetails();
        purchaseDetailsModel = (DefaultTableModel) tblPurchaseDetails.getModel();
        for(int i=0;i<purchaseDetailsList.size();i++){
            purchaseDetailsModel.addRow(new Object[]{purchaseDetailsList.get(i).getHsnCode()
                    , purchaseDetailsList.get(i).getItemName()
                    , purchaseDetailsList.get(i).getUnitPrice()
                    , purchaseDetailsList.get(i).getGstPercentage()
                    , purchaseDetailsList.get(i).getGstAmount()
                    , purchaseDetailsList.get(i).getQuantity()
                    , purchaseDetailsList.get(i).getNetAmount()
                    , 0
                    , 0
                    , purchaseDetailsList.get(i).getItemId()
                    , purchaseDetailsList.get(i).getPurchaseDetailsId()});
        }
        /*if(salesDetailsModel != null){
        salesDetailsModel.addRow(new Object[]{stock.getHsnCode(),stock.getItemName(),stock.getGstPercentage(),df.format(Double.parseDouble(stock.getGstAmount()) * Double.parseDouble(txtQuantity.getText())), itemAmount, Double.parseDouble(txtQuantity.getText()), df.format(itemAmount * Double.parseDouble(txtQuantity.getText())), stock.getItemId()});
        //model.
                
        } */
        //deriveValuesFromSalesInput();
    }
    
    public void deriveValuesFromPurchaseInput(){
        gBillAmount = 0;
         gDiscount = 0;
         gPyableAmount = 0;
         gBalanceAmount = 0;
         gTotalGst = 0;
         gSGst = 0;
         gCGst = 0;
         gQuantity = 0;
         gGst12 = 0;
         gGst18 = 0;
         gGst5 = 0;
         gCess = 0;
        for(int i=0; i<tblPurchaseDetails.getRowCount();i++){
            gQuantity += Double.parseDouble(tblPurchaseDetails.getValueAt(i,5).toString());
            gBillAmount += Double.parseDouble(tblPurchaseDetails.getValueAt(i,6).toString());
            if(tblPurchaseDetails.getValueAt(i,3).toString().equals("12.0") || tblPurchaseDetails.getValueAt(i,3).toString().equals("12")){
                gGst12 += Double.parseDouble(tblPurchaseDetails.getValueAt(i,4).toString());
            }else if(tblPurchaseDetails.getValueAt(i,3).toString().equals("18.0") || tblPurchaseDetails.getValueAt(i,3).toString().equals("18")){
                gGst18 += Double.parseDouble(tblPurchaseDetails.getValueAt(i,4).toString());
            }else if(tblPurchaseDetails.getValueAt(i,3).toString().equals("5.0")|| tblPurchaseDetails.getValueAt(i,3).toString().equals("5")){
                gGst5 += Double.parseDouble(tblPurchaseDetails.getValueAt(i,4).toString());
            }
            gTotalGst += Double.parseDouble(tblPurchaseDetails.getValueAt(i,4).toString());
            
        }
        
        txtGst12.setText(df.format(gGst12));
        txtGst18.setText(df.format(gGst18));
        txtGst5.setText(df.format(gGst5));
        gSGst = gTotalGst*0.5;
        gCGst = gTotalGst*0.5;
        txtSGst.setText(df.format(gSGst));
        txtCGst.setText(df.format(gCGst));
        txtTotalGst.setText(df.format(gTotalGst));
        //gCess = gTotalGst*0.01;
        //txtCess.setText(df.format(gCess));
        //txtCess.setText("0.0");
        txtTotalAmount.setText(df.format(gBillAmount));
        /*if(((PricingTier)cmbSupplierName.getSelectedItem()).getCustomerTypeName().equals("Contractor")){
            gDiscount = gBillAmount*0.03;
        }else{
            gDiscount = 0.0;
        }*/
        //gDiscount = gBillAmount*0.05;
        gPyableAmount = gBillAmount + gCess - gDiscount;
        txtDiscountAmount.setText(df.format(gDiscount));
        txtAmountPayable.setText(df.format(Math.round(gPyableAmount)));
    }
    
    public void clearItemFields(){
        txtItemName.setText(null);
        txtHSNCode.setText(null);
        txtRate.setText(null);
        txtQuantity.setText(null);
        txtPurchasePrice.setText(null);
        txtGstAmount.setText(null);
        txtGstPercentage.setText(null);
        txtWholesalePrice.setText(null);
        txtRetailPrice.setText(null);
        lblAvailableQty.setText(null);
    }
    
        private void handleClosing() {
        if (hasUnsaveData()) {
            int answer = showWarningMessage();
             
            switch (answer) {
                case JOptionPane.YES_OPTION:
                    System.out.println("Quit");
                    dispose();
                    break;
                     
                case JOptionPane.NO_OPTION:
                    System.out.println("Don't Quit");
                    //dispose();
                    break;
                     
                case JOptionPane.CANCEL_OPTION:
                    System.out.println("Don't Quit");
                    break;
            }
        } else {
            dispose();
        }      
    }
    
    private int showWarningMessage() {
        String[] buttonLabels = new String[] {"Yes", "No"};
        String defaultOption = buttonLabels[1];
        Icon icon = null;
        //new javax.swing.ImageIcon(getClass().getResource("/images/save.png"));
         
        return JOptionPane.showOptionDialog(this,
                "Are you sure to quit the window ?\n",
                "Warning",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE,
                icon,
                buttonLabels,
                defaultOption);    
    }
 
    private boolean hasUnsaveData() {
        // checks if there's still something unsaved
        // this method always return true for demo purpose
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMore;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewAll;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox cmbSupplierName;
    private javax.swing.JButton cmdReset;
    private com.toedter.calendar.JDateChooser dtpPurchaseDate;
    private javax.swing.ButtonGroup grpSalesType;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblAvailableQty;
    private javax.swing.JLabel lblCGst;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblGst12;
    private javax.swing.JLabel lblGst13;
    private javax.swing.JLabel lblGst14;
    private javax.swing.JLabel lblGstAmount;
    private javax.swing.JLabel lblHSNCode;
    private javax.swing.JLabel lblHSNCode1;
    private javax.swing.JLabel lblHSNCode2;
    private javax.swing.JLabel lblInvoiceNumber;
    private javax.swing.JLabel lblItemName;
    private javax.swing.JLabel lblMrp;
    private javax.swing.JLabel lblPaymentType;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblSGst;
    private javax.swing.JLabel lblSGst1;
    private javax.swing.JLabel lblSGst2;
    private javax.swing.JLabel lblSGst3;
    private javax.swing.JLabel lblSellingPrice;
    private javax.swing.JLabel lblSupplierName;
    private javax.swing.JLabel lblTotalGst;
    private javax.swing.JLabel lblUnitPrice;
    private javax.swing.JLabel lblgstPercentage;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitReturn;
    private javax.swing.JPopupMenu mnuPurchaseActions;
    private javax.swing.JPanel pnlPurchase;
    private javax.swing.JRadioButton radCash;
    private javax.swing.JRadioButton radCredit;
    private javax.swing.JScrollPane spnPurchaseItems;
    private com.essar.dao.StockDAO stockDAO1;
    private javax.swing.JTable tblPurchaseDetails;
    private javax.swing.JTextField txtAmountPayable;
    private javax.swing.JTextField txtCGst;
    private javax.swing.JTextField txtDiscountAmount;
    private javax.swing.JTextField txtGst12;
    private javax.swing.JTextField txtGst18;
    private javax.swing.JTextField txtGst5;
    private javax.swing.JTextField txtGstAmount;
    private javax.swing.JTextField txtGstPercentage;
    private javax.swing.JTextField txtHSNCode;
    private javax.swing.JTextField txtInvoiceNumber;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtMrp;
    private javax.swing.JTextField txtPurchasePrice;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtRate;
    private javax.swing.JTextField txtRetailPrice;
    private javax.swing.JTextField txtSGst;
    private javax.swing.JTextField txtTotalAmount;
    private javax.swing.JTextField txtTotalGst;
    private javax.swing.JTextField txtWholesalePrice;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        try{
            JMenuItem menu = (JMenuItem) event.getSource();
            if (menu == mitDelete) {
                //int rowIndex = tblSupplier.getSelectedRow();
                System.out.println("--------INSIDE DELETE-"+tblPurchaseDetails.getModel().getValueAt(tblPurchaseDetails.getSelectedRow(),0));
                //Removes just the selected row from UI,  NOT from DB
                map.remove(tblPurchaseDetails.getModel().getValueAt(tblPurchaseDetails.getSelectedRow(),7));
                System.out.println("map keys : "+map.keySet());
                GenericUtils.removeRowFromJTable(tblPurchaseDetails, purchaseDetailsModel);
                
                deriveValuesFromPurchaseInput();
            }else if (menu == mitReturn) {
                PurchaseReturn purchaseReturn = new PurchaseReturn();
                //int rowIndex = tblSupplier.getSelectedRow();
                System.out.println("--------INSIDE PURCHASE RETURN "+txtInvoiceNumber.getText());
                //Removes just the selected row from UI,  NOT from DB
                //System.out.println("Map Size ::" + map.size());
                purchaseReturn.setBillNumber(txtInvoiceNumber.getText().trim());
                purchaseReturn.setItemName(tblPurchaseDetails.getModel().getValueAt(tblPurchaseDetails.getSelectedRow(),1).toString());
                purchaseReturn.setCreateTS(Calendar.getInstance().getTime());
                purchaseReturn.setItemId(Long.parseLong(tblPurchaseDetails.getModel().getValueAt(tblPurchaseDetails.getSelectedRow(),9).toString()));
                purchaseReturn.setNetAmount(Double.parseDouble(tblPurchaseDetails.getModel().getValueAt(tblPurchaseDetails.getSelectedRow(),6).toString()));
                purchaseReturn.setQuantity(Double.parseDouble(tblPurchaseDetails.getModel().getValueAt(tblPurchaseDetails.getSelectedRow(),5).toString()));
                purchaseReturn.setUpdateTS(Calendar.getInstance().getTime());
                purchaseReturn.setPurchaseId(purchaseIdEdit);
                purchaseReturn.setPurchaseDetailsId(Long.parseLong(tblPurchaseDetails.getModel().getValueAt(tblPurchaseDetails.getSelectedRow(),10).toString()));
                returnList.add(purchaseReturn);
                  
                /*if(map.size()>0){
                    map.remove(tblSalesDetails.getModel().getValueAt(tblSalesDetails.getSelectedRow(),7));
                }
                System.out.println("map keys : "+map.keySet());*/
                GenericUtils.removeRowFromJTable(tblPurchaseDetails, purchaseDetailsModel);
                deriveValuesFromPurchaseInput();
                
            } 
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }
}
