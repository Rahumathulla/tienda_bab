/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.essar.screens;

import com.essar.dao.GstDAO;
import com.essar.dao.PricingTierDAO;
import com.essar.dao.ProductCategoryDAO;
import com.essar.dao.StockDAO;
import com.essar.dao.SupplierDAO;
import com.essar.pojos.GST;
import com.essar.pojos.ProductCategory;
import com.essar.pojos.Sales;
import com.essar.pojos.SalesDetails;
import com.essar.utils.ConnectionManager;
import com.essar.utils.TableMouseListener;
import com.essar.pojos.Stock;
import com.essar.pojos.Supplier;
import com.essar.suggestion.SuggestionUtility;
import com.essar.utils.GenericUtils;
import com.essar.utils.QueryStrings;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.text.DecimalFormat;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author rahumathulla
 */
public class StockEntry extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form Stock
     */
    long stockIdEdit=0;
    DecimalFormat df = new DecimalFormat("####.##");
    //!-- 07/28/2020 Added for navigation
    long minId = 0;
    long maxId = 0;
    long currentId=0;
    boolean itemPopulated = false;
    Set<String> suggestionSet=null;
    public StockEntry() {
        initComponents();
        initializeForm();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/tienda.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlStockEntry = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblReorderAt = new javax.swing.JLabel();
        txtHSNCode = new javax.swing.JTextField();
        txtItemName = new javax.swing.JTextField();
        txtPurchasePrice = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox();
        lblPurchasePrice = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        cmbSupplier = new javax.swing.JComboBox();
        lblQuantity = new javax.swing.JLabel();
        txtReOrderAt = new javax.swing.JTextField();
        lblMrp = new javax.swing.JLabel();
        txtMrp = new javax.swing.JTextField();
        lblSellingPriceB2B = new javax.swing.JLabel();
        txtSellingPriceWS = new javax.swing.JTextField();
        lblLandingPrice = new javax.swing.JLabel();
        txtLandingPrice = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbGST = new javax.swing.JComboBox();
        txtSellingPrice = new javax.swing.JTextField();
        lblSellingPrice = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnReports = new javax.swing.JButton();
        btnViewAll = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Menu Entry");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("HSN Code");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Commodity/Item Name");

        lblReorderAt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblReorderAt.setText("Re Order at");

        txtHSNCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtHSNCode.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtHSNCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHSNCodeActionPerformed(evt);
            }
        });
        txtHSNCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHSNCodeKeyPressed(evt);
            }
        });

        txtItemName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtItemName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtItemName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemNameActionPerformed(evt);
            }
        });
        txtItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemNameKeyReleased(evt);
            }
        });

        txtPurchasePrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPurchasePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPurchasePriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPurchasePriceKeyReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Category");

        cmbCategory.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Construction", "Others" }));
        cmbCategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbCategoryKeyPressed(evt);
            }
        });

        lblPurchasePrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPurchasePrice.setText("Purchase Price");

        txtQuantity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQuantityKeyPressed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Description");

        txtDescription.setColumns(10);
        txtDescription.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDescription.setRows(3);
        txtDescription.setTabSize(4);
        txtDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDescriptionKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtDescription);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Supplier Name");

        cmbSupplier.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbSupplier.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSupplierKeyPressed(evt);
            }
        });

        lblQuantity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblQuantity.setText("Quantity");

        txtReOrderAt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtReOrderAt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtReOrderAtKeyPressed(evt);
            }
        });

        lblMrp.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblMrp.setForeground(new java.awt.Color(0, 102, 102));
        lblMrp.setText("MRP *");

        txtMrp.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtMrp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMrpKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMrpKeyReleased(evt);
            }
        });

        lblSellingPriceB2B.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSellingPriceB2B.setForeground(new java.awt.Color(0, 102, 102));
        lblSellingPriceB2B.setText("WholeSale Price *");

        txtSellingPriceWS.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSellingPriceWS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSellingPriceWSKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSellingPriceWSKeyReleased(evt);
            }
        });

        lblLandingPrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblLandingPrice.setText("Landing Price");

        txtLandingPrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtLandingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLandingPriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLandingPriceKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("GST %");

        cmbGST.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbGST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGSTActionPerformed(evt);
            }
        });
        cmbGST.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbGSTKeyPressed(evt);
            }
        });

        txtSellingPrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSellingPriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSellingPriceKeyReleased(evt);
            }
        });

        lblSellingPrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSellingPrice.setForeground(new java.awt.Color(0, 102, 102));
        lblSellingPrice.setText("Price *");

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png"))); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setText("Save");
        btnSave.setAlignmentY(0.0F);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnReports.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnReports.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/report.png"))); // NOI18N
        btnReports.setMnemonic('t');
        btnReports.setText("Stock Report");
        btnReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportsActionPerformed(evt);
            }
        });

        btnViewAll.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnViewAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/viewall.png"))); // NOI18N
        btnViewAll.setText("View All");
        btnViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnSearch.setMnemonic('e');
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.png"))); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        btnReset.setMnemonic('R');
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/next.png"))); // NOI18N
        btnNext.setMnemonic('x');
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/previous.png"))); // NOI18N
        btnPrevious.setMnemonic('r');
        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(btnReports, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnViewAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReports, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlStockEntryLayout = new javax.swing.GroupLayout(pnlStockEntry);
        pnlStockEntry.setLayout(pnlStockEntryLayout);
        pnlStockEntryLayout.setHorizontalGroup(
            pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStockEntryLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStockEntryLayout.createSequentialGroup()
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlStockEntryLayout.createSequentialGroup()
                                .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlStockEntryLayout.createSequentialGroup()
                                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtHSNCode, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStockEntryLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(lblSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(314, 314, 314)))
                                .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMrp, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPurchasePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStockEntryLayout.createSequentialGroup()
                                            .addGap(174, 174, 174)
                                            .addComponent(txtLandingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lblLandingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStockEntryLayout.createSequentialGroup()
                                                .addGap(174, 174, 174)
                                                .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtSellingPriceWS, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtQuantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtReOrderAt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(pnlStockEntryLayout.createSequentialGroup()
                                                .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(lblReorderAt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblQuantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblSellingPriceB2B, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(69, 69, 69))))))
                            .addGroup(pnlStockEntryLayout.createSequentialGroup()
                                .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cmbGST, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(cmbCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cmbSupplier, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                                    .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMrp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPurchasePrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(123, 123, 123))
                    .addGroup(pnlStockEntryLayout.createSequentialGroup()
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlStockEntryLayout.createSequentialGroup()
                                .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlStockEntryLayout.setVerticalGroup(
            pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStockEntryLayout.createSequentialGroup()
                .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStockEntryLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlStockEntryLayout.createSequentialGroup()
                                .addComponent(lblMrp, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPurchasePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlStockEntryLayout.createSequentialGroup()
                                .addComponent(txtMrp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPurchasePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblLandingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLandingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSellingPriceWS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSellingPriceB2B, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlStockEntryLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHSNCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStockEntryLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblQuantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblReorderAt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtReOrderAt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlStockEntryLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbGST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlStockEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(pnlStockEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 711, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlStockEntry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllActionPerformed
        // TODO add your handling code here:
        QueryStrings.stockQuery = "SELECT * from stock";
        this.dispose();
        ViewStockAlerts stockAlerts = new ViewStockAlerts();
        //stockAlerts.setBounds(40, 40, 940, 500);
        stockAlerts.setExtendedState(6);
        stockAlerts.setVisible(true);
    }//GEN-LAST:event_btnViewAllActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        initializeForm();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportsActionPerformed
        // TODO add your handling code here:
        ConnectionManager cm = new ConnectionManager();
        Connection con = cm.getConnection();
        //String reportString="D:\\Applications\\Tienda\\reports\\stock_report.jrxml";
        String reportString="src\\com\\essar\\reports\\stock_report.jrxml";
        //String reportString="D:\\reports\\users.jrxml";
        JasperReport jr = null;
        try {
            jr = JasperCompileManager.compileReport(reportString);
        } catch (JRException ex) {
            Logger.getLogger(StockEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
        JasperPrint jp = null;
        try {
            jp = JasperFillManager.fillReport(jr, null,con);
        } catch (JRException ex) {
            Logger.getLogger(StockEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
        //JasperViewer.viewReport(jp);
        JasperViewer jv = new JasperViewer(jp, false);
        jv.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt){
                //JOptionPane.showMessageDialog(new javax.swing.JFrame(), "Closed","Why?", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("Jasper Window has been closed");
            }
        });
        jv.setVisible(true);
    }//GEN-LAST:event_btnReportsActionPerformed

    private void txtReOrderAtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReOrderAtKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_txtReOrderAtKeyPressed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if(btnSave.getText().equalsIgnoreCase("add")){
            ProductCategoryDAO categoryDAO = new ProductCategoryDAO();
            renderCategoryDataIntoDropDown(categoryDAO.retrieveAll());
            
            SupplierDAO supplierDAO = new SupplierDAO();
            renderSupplierDataIntoDropDown(supplierDAO.retrieveAll());

            GstDAO gstDAO = new GstDAO();
            renderGstDataIntoDropDown(gstDAO.retrieveAll());
            
            SuggestionUtility.populateItemNames(this, txtItemName);

            btnSave.setText("Save");
            btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
            //txtMargin.setText("0");
            txtReOrderAt.setText("5");
            //chkGstIncluded.setSelected(true);
            enableFormElements(true);
            txtItemName.requestFocus();
            //SuggestionExampleMain.populateItemNames(this, txtItemName);
        }else{
            //Implement Save Logic
            if(validateForm()){
                saveStockData();
                initializeForm();
            }

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cmbGSTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbGSTKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            //txtMargin.requestFocus();
            //txtPurchasePrice.requestFocus();
            txtMrp.requestFocus();
        }
    }//GEN-LAST:event_cmbGSTKeyPressed

    private void cmbGSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGSTActionPerformed
        // TODO add your handling code here:
        //if(txtSuggestions.isVisible()){
            //calculateSuggestions();
       // }
    }//GEN-LAST:event_cmbGSTActionPerformed

    private void cmbSupplierKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSupplierKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            cmbGST.requestFocus();
        }
    }//GEN-LAST:event_cmbSupplierKeyPressed

    private void txtDescriptionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescriptionKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtPurchasePrice.requestFocus();
        }
    }//GEN-LAST:event_txtDescriptionKeyPressed

    private void txtQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtReOrderAt.requestFocus();
        }
    }//GEN-LAST:event_txtQuantityKeyPressed

    private void cmbCategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbCategoryKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            cmbSupplier.requestFocus();
        }
    }//GEN-LAST:event_cmbCategoryKeyPressed

    private void txtPurchasePriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPurchasePriceKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            //cmbGST.requestFocus();
            txtLandingPrice.requestFocus();
            //calculateSuggestions();
        }else if(evt.getKeyCode() == KeyEvent.VK_INSERT){
            //calculateSuggestions();
        }
            
    }//GEN-LAST:event_txtPurchasePriceKeyPressed

    private void txtItemNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNameKeyPressed
        // TODO add your handling code here:
       /* if(((evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER))
                && itemPopulated==true){
            if(null!=txtHSNCode.getText() || !("".equals(txtHSNCode.getText())))
                cmbCategory.requestFocus();
            else
                txtHSNCode.requestFocus();
        }*/
        if(itemPopulated==true && ((evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER))){
            //txtHSNCode.requestFocus();
            //txtItemName.setText(txtItemName.getText().trim());
            txtHSNCode.requestFocus();
        }
    }//GEN-LAST:event_txtItemNameKeyPressed

    private void txtHSNCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHSNCodeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            //txtItemName.requestFocus();
            cmbCategory.requestFocus();
        }
    }//GEN-LAST:event_txtHSNCodeKeyPressed

    private void txtHSNCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHSNCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHSNCodeActionPerformed

    private void txtPurchasePriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPurchasePriceKeyReleased
        // TODO add your handling code here:

        if(evt.getKeyCode()== evt.VK_ENTER || evt.getKeyCode()== evt.VK_TAB){
            try{
                txtLandingPrice.setText(txtPurchasePrice.getText());
            }catch(Exception e){
                
            }
        } else{
            //calculatePricingLogic();
        }
    }//GEN-LAST:event_txtPurchasePriceKeyReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        
        StockFind stockFind = new StockFind();
        stockFind.setBounds(150, 160, 660, 300);
        stockFind.setVisible(true);
        
       
        
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtMrpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMrpKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtPurchasePrice.requestFocus();
        }
    }//GEN-LAST:event_txtMrpKeyPressed

    private void txtMrpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMrpKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_txtMrpKeyReleased

    private void txtSellingPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSellingPriceKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(null!=txtSellingPrice.getText() && !("".equals(txtSellingPrice.getText())))
                txtQuantity.requestFocus();
            else
                txtSellingPrice.requestFocus();
        }
    }//GEN-LAST:event_txtSellingPriceKeyPressed

    private void txtSellingPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSellingPriceKeyReleased
        // TODO add your handling code here:
        try{
            double retailPrice = 0;
            double wholeSalePrice = 0;
            if(null!= txtSellingPrice.getText() && !("".equals(txtSellingPrice.getText())))
                    retailPrice = Double.parseDouble(txtSellingPrice.getText());
            if(null!= txtSellingPriceWS.getText() && !("".equals(txtSellingPriceWS.getText())))
                    wholeSalePrice = Double.parseDouble(txtSellingPriceWS.getText());
            if(retailPrice < wholeSalePrice){
                txtSellingPrice.setBackground(Color.red);
            }else{
                txtSellingPrice.setBackground(Color.white);
            }
            
        }catch(Exception e){
            System.out.println("--"+e.getMessage());
        }

    }//GEN-LAST:event_txtSellingPriceKeyReleased

    private void txtSellingPriceWSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSellingPriceWSKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()== evt.VK_ENTER || evt.getKeyCode()== evt.VK_TAB){
            if(null!=txtSellingPriceWS.getText() && !("".equals(txtSellingPriceWS.getText()))){                
                txtSellingPrice.requestFocus();
            }
        } 
    }//GEN-LAST:event_txtSellingPriceWSKeyPressed

    private void txtSellingPriceWSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSellingPriceWSKeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtSellingPriceWSKeyReleased

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        try{

            if(currentId-1 >= minId){
                currentId = currentId -1;
                StockDAO stockDAO = new StockDAO();
                fetchStockDataIntoTable(stockDAO.retrieveById(currentId));
            }else{
                JOptionPane.showMessageDialog(null, "No more record before.");
            }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Reached at the beginning.");
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        try{
            if(currentId+1 <= maxId){
                currentId = currentId +1;
                StockDAO stockDAO = new StockDAO();
                fetchStockDataIntoTable(stockDAO.retrieveById(currentId));
            }else{
                JOptionPane.showMessageDialog(null, "No more record after.");
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Reached at the end.");
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void txtItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemNameActionPerformed
        // TODO add your handling code here:
        //populateItemDetails();
        txtItemName.setFocusCycleRoot(true);
    }//GEN-LAST:event_txtItemNameActionPerformed

    private void txtItemNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNameKeyReleased
        // TODO add your handling code here:
        /*if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            populateItemDetails();
            //txtItemName.requestFocus();
        }*/
        
        if(evt.getKeyCode()==KeyEvent.VK_BACK_SPACE||evt.getKeyCode()==KeyEvent.VK_DELETE){
           
        }else if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            populateItemDetails();
            
            try{
                txtHSNCode.requestFocus();
            }catch(Exception e){
                
            }
        }
        
        /*else{   
            String to_check=txtItemName.getText().toUpperCase();
            int to_check_len=to_check.length();
            for(String data:suggestionSet){
                String check_from_data="";
                for(int i=0;i<to_check_len;i++){
                    if(to_check_len<=data.length()){
                        check_from_data = check_from_data+data.charAt(i);
                    }
                }
                //System.out.print(check_from_data);
                if(check_from_data.equals(to_check)){
                    //System.out.print("Found");
                    txtItemName.setText(data);
                    txtItemName.setSelectionStart(to_check_len);
                    txtItemName.setSelectionEnd(data.length());
                    break;
                }
            }
        }*/
        
    }//GEN-LAST:event_txtItemNameKeyReleased

    private void txtLandingPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLandingPriceKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            //cmbGST.requestFocus();
            txtSellingPriceWS.requestFocus();
            //calculateSuggestions();
        }else if(evt.getKeyCode() == KeyEvent.VK_INSERT){
            //calculateSuggestions();
        }
    }//GEN-LAST:event_txtLandingPriceKeyPressed

    private void txtLandingPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLandingPriceKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLandingPriceKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockEntry().setVisible(true);
            }
        });
    }
    
    public void initializeForm(){
        stockIdEdit =0;
        btnSave.setText("Add");
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png")));
        btnSave.requestFocus();
        //txtHSNCode.setText("");
        txtMrp.setText("0");
        txtItemName.setText("");
        //txtMargin.setText("");
        txtPurchasePrice.setText("0");
        txtQuantity.setText("0");
        txtReOrderAt.setText("0");
        txtDescription.setText("");
        txtSellingPrice.setText("");
        txtSellingPriceWS.setText("0");
        txtLandingPrice.setText("0");
        
        txtPurchasePrice.setVisible(false);
        lblPurchasePrice.setVisible(false);
        txtQuantity.setVisible(false);
        lblQuantity.setVisible(false);
        txtReOrderAt.setVisible(false);
        lblReorderAt.setVisible(false);
        txtLandingPrice.setVisible(false);
        lblLandingPrice.setVisible(false);
        txtPurchasePrice.setVisible(false);
        lblPurchasePrice.setVisible(false);
                txtMrp.setVisible(false);
        lblMrp.setVisible(false);
                txtSellingPriceWS.setVisible(false);
        lblSellingPriceB2B.setVisible(false);
                txtPurchasePrice.setVisible(false);
        lblPurchasePrice.setVisible(false);
        //chkAddGst.setSelected(false);
        //txtSuggestions.setVisible(false);
      
        if(cmbCategory.getItemCount()>0){
            cmbCategory.setSelectedIndex(0); 
        }

        cmbSupplier.removeAllItems();
        cmbGST.removeAllItems();
        cmbCategory.removeAllItems();
        


        enableFormElements(false);
        SupplierDAO supplierDAO = new SupplierDAO();

        StockDAO navigationDAO =  new StockDAO();
        List<Long> idMaxMin = navigationDAO.getMaxAndMinIds();
        minId = idMaxMin.get(0);
        maxId = idMaxMin.get(1);
        //SuggestionExampleMain suggestionExampleMain = new SuggestionExampleMain();        
        //suggestionExampleMain.populateItemNamesStock(this, txtItemName);
        navigationDAO =  new StockDAO();//re-initialize to get the the stock list.
        suggestionSet = navigationDAO.getDistinctItemNames();

   
    }
    
    public void calculatePricingLogic(){
        try{
            
        
            if(cmbGST.getSelectedItem()!=null){
                double sellingPrice =0;
                double gstVal = Double.parseDouble(cmbGST.getSelectedItem().toString());
                double margin =0;
                    //if(null!= txtMargin.getText() || !("".equalsIgnoreCase(txtMargin.getText())))
                    //    margin = Double.parseDouble(txtMargin.getText());
                double pPrice =0;
                    if(null!= txtPurchasePrice.getText() || !("".equalsIgnoreCase(txtPurchasePrice.getText())))
                        pPrice = Double.parseDouble(txtPurchasePrice.getText());
                if(gstVal > 5){

                        
                    sellingPrice = pPrice + 
                            (gstVal+1)*0.01 //+1 is for cess addition
                            *pPrice;
                    sellingPrice = sellingPrice *(1+margin*0.01);
                }else if(gstVal <= 5){
                    sellingPrice = pPrice + 
                            (gstVal)*0.01 
                            *pPrice;
                    sellingPrice = sellingPrice *(1+margin*0.01);
                }
                txtSellingPrice.setText(GenericUtils.roundDouble(sellingPrice, 2)+"");
            }
        }catch(Exception e){
            System.out.println("---"+e.getMessage());
        }
    }
    
    public void enableFormElements(boolean flag){
        txtHSNCode.setEnabled(flag);
        txtDescription.setEnabled(flag);
        txtItemName.setEnabled(flag);
        //txtMargin.setEnabled(flag);
        txtPurchasePrice.setEnabled(flag);
        txtQuantity.setEnabled(flag);
        txtSellingPrice.setEnabled(flag);
        txtSellingPriceWS.setEnabled(flag);
        txtReOrderAt.setEnabled(flag);
        cmbCategory.setEnabled(flag);
        cmbSupplier.setEnabled(flag);
        cmbGST.setEnabled(flag);
        txtMrp.setEnabled(flag); 
        txtLandingPrice.setEnabled(flag);
    }
    public boolean validateForm(){
        //btnSave.setText("Add");
        //btnSave.requestFocus();
        if(null == txtHSNCode.getText() || !(txtHSNCode.getText().matches("\\w+"))){
            JOptionPane.showMessageDialog(null, "HSN code "+txtHSNCode.getText() +" is not valid.");
            txtHSNCode.requestFocus();
            return false;
        }
        if(null == txtItemName.getText() || txtItemName.getText().equalsIgnoreCase("")){
            JOptionPane.showMessageDialog(null, "Item name "+txtItemName.getText() +" is not valid.");
            txtItemName.requestFocus();
            return false;
        }
        
        if(cmbSupplier.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null, "Please choose a Supplier Name");
            cmbSupplier.requestFocus();
            return false;
        }
        
        if(cmbGST.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null, "Please choose GST value");
            cmbGST.requestFocus();
            return false;
        }
        
        /*if(null == txtMrp.getText() || !(txtMrp.getText().matches("^\\d*\\.\\d+|\\d+|\\d+\\.\\d*$"))){
            JOptionPane.showMessageDialog(null, "MRP "+txtMrp.getText() +" is not valid.");
            txtMrp.requestFocus();
            return false;
        }*/
        
        /*if(null == txtMargin.getText() || !(txtMargin.getText().matches("^\\d*\\.\\d+|\\d+|\\d+\\.\\d*$"))){
            JOptionPane.showMessageDialog(null, "Margin value "+txtMargin.getText() +" is not valid.");
            txtMargin.requestFocus();
            return false;
        }*/
        
        if(null == txtQuantity.getText() || !(txtQuantity.getText().matches("^\\d*\\.\\d+|\\d+|\\d+\\.\\d*$"))){
            /*JOptionPane.showMessageDialog(null, "Quantity value "+txtQuantity.getText() +" is not valid.");
            txtQuantity.requestFocus();
            return false;*/
            txtQuantity.setText("0");
        }
        
        if(null == txtReOrderAt.getText() || !(txtReOrderAt.getText().matches("^\\d*\\.\\d+|\\d+|\\d+\\.\\d*$"))){
            /*JOptionPane.showMessageDialog(null, "Re-order value "+txtReOrderAt.getText() +" is not valid.");
            txtReOrderAt.requestFocus();
            return false;*/
            txtReOrderAt.setText("0");
        }
        
        if(null == txtPurchasePrice.getText() || "".equals(txtPurchasePrice.getText())){
            /*JOptionPane.showMessageDialog(null, "Please enter the purchase price.");
            txtPurchasePrice.requestFocus();
            return false;*/
            txtPurchasePrice.setText("0");
        }
        if(null == txtSellingPriceWS.getText() || "".equals(txtSellingPriceWS.getText())){
            /*JOptionPane.showMessageDialog(null, "Please enter the wholesale price.");
            txtSellingPriceWS.requestFocus();
            return false;*/
            txtSellingPriceWS.setText("0");
        }
        if(null == txtSellingPrice.getText() || "".equals(txtSellingPrice.getText())){
            JOptionPane.showMessageDialog(null, "Please enter the item price.");
            txtSellingPriceWS.requestFocus();
            return false;            
        }
        /*if(Double.parseDouble(txtSellingPriceWS.getText()) > Double.parseDouble(txtSellingPrice.getText())){
            JOptionPane.showMessageDialog(null, "Wholesale Price is greater than Retail Price.");
            txtSellingPriceWS.requestFocus();
            return false;
        }*/
        
        //txtProductCategoryName.setText("");
        return true;
    }
    
    public void saveStockData(){
 
        Stock stock = new Stock();
        stock.setHsnCode(txtHSNCode.getText());
        stock.setItemName(txtItemName.getText());
        stock.setCategory(cmbCategory.getSelectedItem().toString());
        stock.setSupplier(cmbSupplier.getSelectedItem().toString());
        stock.setDescription(txtDescription.getText());
        stock.setMrp(Double.parseDouble(txtMrp.getText()));
        stock.setPurchasePrice(Double.parseDouble(txtPurchasePrice.getText()));
        stock.setGstPercentage(Double.parseDouble(cmbGST.getSelectedItem().toString()));
        stock.setGstAmount(Double.parseDouble(txtPurchasePrice.getText())*Double.parseDouble(cmbGST.getSelectedItem().toString()));
        //stock.setMargin(Double.parseDouble(txtMargin.getText()));
        stock.setMargin(0);
        double dPurchasePrice = 0.0;
        /*if(chkAddGst.isSelected()){
            dPurchasePrice = Double.parseDouble(txtPurchasePrice.getText())*(1+stock.getGstPercentage()/100); 
            System.out.println("--- Purchase Price : "+ dPurchasePrice);            
            System.out.println("After formatingg --"+df.format(dPurchasePrice));
            stock.setPurchasePrice(Double.parseDouble(df.format(dPurchasePrice)));
        }*/
        //Float fSellingPrice = (Float.parseFloat(txtPurchasePrice.getText()))+(Float.parseFloat(txtMargin.getText()));
        double preMarginSalesPrice = stock.getPurchasePrice()+stock.getPurchasePrice()*stock.getGstPercentage()*0.01;
        //stock.setSellingPrice(preMarginSalesPrice+preMarginSalesPrice*stock.getMargin()*0.01);
        stock.setSellingPrice(Double.parseDouble(txtSellingPrice.getText()));
        stock.setWholesalePrice(Double.parseDouble(txtSellingPriceWS.getText()));
        stock.setQuantity(Double.parseDouble(txtQuantity.getText()));
        stock.setReOrderQuantity(Double.parseDouble(txtReOrderAt.getText()));
        stock.setLandingPrice(Double.parseDouble(txtLandingPrice.getText()));

        StockDAO stockDAO = new StockDAO();
        if (stockIdEdit >0){
            stock.setItemId(stockIdEdit);
            stockDAO.updateStock(stock);
        }else
            stockDAO.insertIntoDB(stock);
        
    }
    
    public final void fetchStockDataIntoTable(Stock stock){
        stockIdEdit=0;
        stockIdEdit = stock.getItemId();
        currentId = stock.getItemId();
        System.out.println("--Called fetchStockDataIntoTable"+stock.getItemName());
        //initializeForm();
        enableFormElements(true);
        btnSave.setText("Update");
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png")));
        
        //--!@09/03/2020
        SupplierDAO supplierDAO = new SupplierDAO();
        renderSupplierDataIntoDropDown(supplierDAO.retrieveAll());
        for(int i=0; i<cmbSupplier.getItemCount();i++){
            if(((Supplier)cmbSupplier.getItemAt(i)).getSupplierName().equalsIgnoreCase(stock.getSupplier())){
                cmbSupplier.setSelectedItem(cmbSupplier.getItemAt(i));
            }
        }
        
        //--!@14/06/2020
        ProductCategoryDAO categoryDAO = new ProductCategoryDAO();
        renderCategoryDataIntoDropDown(categoryDAO.retrieveAll());
        for(int i=0; i<cmbCategory.getItemCount();i++){
            if(((ProductCategory)cmbCategory.getItemAt(i)).getProductCategoryName().equalsIgnoreCase(stock.getCategory())){
                cmbCategory.setSelectedItem(cmbCategory.getItemAt(i));
            }
        }
        //cmbSupplier.setSelectedItem(cmbSupplier.getItemAt(3));

        GstDAO gstDAO = new GstDAO();
        renderGstDataIntoDropDown(gstDAO.retrieveAll());
        //cmbGST.setSelectedItem(stock.getGstPercentage());
        for(int i=0; i<cmbGST.getItemCount();i++){
            if(((GST)cmbGST.getItemAt(i)).getGstValue()==stock.getGstPercentage()){
                cmbGST.setSelectedItem(cmbGST.getItemAt(i));
            }
        }
        
        txtHSNCode.setText(stock.getHsnCode());
        txtItemName.setText(stock.getItemName());        
        txtPurchasePrice.setText(stock.getPurchasePrice()+"");
        //txtMargin.setText(stock.getMargin()+"");
        txtQuantity.setText(stock.getQuantity()+"");
        txtDescription.setText(stock.getDescription());
        txtReOrderAt.setText(stock.getReOrderQuantity()+"");
        txtMrp.setText(stock.getMrp()+"");
        txtSellingPrice.setText(stock.getSellingPrice()+"");
        txtSellingPriceWS.setText(stock.getWholesalePrice()+"");
        txtLandingPrice.setText(stock.getLandingPrice()+"");
        
        cmbCategory.setSelectedItem(stock.getCategory());
        
        

        /*if(salesDetailsModel != null){
        salesDetailsModel.addRow(new Object[]{stock.getHsnCode(),stock.getItemName(),stock.getGstPercentage(),df.format(Double.parseDouble(stock.getGstAmount()) * Double.parseDouble(txtQuantity.getText())), itemAmount, Double.parseDouble(txtQuantity.getText()), df.format(itemAmount * Double.parseDouble(txtQuantity.getText())), stock.getItemId()});
        //model.
                
        } */
        //deriveValuesFromSalesInput();
    }
    
    public void populateItemDetails(){
            System.out.println("---inside item name change");
            Stock stock =null;
            itemPopulated = false;
            try{
                StockDAO stockDAO = null;
                if(!txtItemName.getText().equalsIgnoreCase("")){
                    stockDAO = new StockDAO();
                    stock = stockDAO.retrieveByName(txtItemName.getText().trim());
                }                
                System.out.println("item--"+txtItemName.getText()+"/HSN-"+stock.getHsnCode());
                if(null!=stock.getHsnCode()){
                    itemPopulated  = true;
                    txtHSNCode.setText(stock.getHsnCode());
                }
                //txtItemName.setText(txtItemName.getText().trim());
                //txtItemName.requestFocus();
                txtHSNCode.requestFocus();
            }            
            catch(Exception e){
                System.out.println("Error Retrieving the item -"+e.getMessage());
            }            
            
    }
    
 

    
    
    public void calculateSuggestions(){
        //txtSuggestions.setVisible(true);
            //if(null!= txtPurchasePrice.getText()&& null!= txtMargin.getText()){
        if(1<1){
                double gstDecimal= ((GST) cmbGST.getSelectedItem()).getGstValue()/100;
                System.out.println("GST Decimal : "+gstDecimal);
                double sp5 =0;
                double sp8 =0;
                double sp10 =0;
                double sp12 =0;
                double sp15 =0;
                double sp18 =0;
                double sp20 =0;
                double sp25 =0;
                double sp30 =0;
                double sp35 =0;
                double sp40 =0;
                double sp45 =0;
                double sp50 =0;
                double sp55 =0;
                double sp60 =0;
                double sp65 =0;
                double sp70 =0;
                if(gstDecimal <=5){
                    sp5 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.05;
                    sp8 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.08;
                    sp10 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.10;
                    sp12 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.12;
                    sp15 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.15;
                    sp18 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.18;
                    sp20 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.20;
                    sp25 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.25;
                    sp30 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.30;
                    sp35 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.35;
                    sp40 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.40;
                    sp45 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.45;
                    sp50 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.50;
                    sp55 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.55;
                    sp60 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.60;
                    sp65 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.65;
                    sp70 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.70;
                }else{
                    sp5 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.06;
                    sp8 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.09;
                    sp10 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.11;
                    sp12 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.13;
                    sp15 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.16;
                    sp18 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.19;
                    sp20 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.21;
                    sp25 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.26;
                    sp30 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.31;
                    sp35 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.36;
                    sp40 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.41;
                    sp45 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.46;
                    sp50 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.51;
                    sp55 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.56;
                    sp60 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.61;
                    sp65 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.66;
                    sp70 = (Double.parseDouble(txtPurchasePrice.getText())
                            + Double.parseDouble(txtPurchasePrice.getText())*gstDecimal)*1.71;
                }
                
                /*txtSuggestions.setText("5%  - "+df.format(sp5)+"\n"+
                                        "8%  - "+df.format(sp8)+"\n"+
                                        "10% - "+df.format(sp10)+"\n"+
                                        "12% - "+df.format(sp12)+"\n"+
                                        "15% - "+df.format(sp15)+"\n"+
                                        "18% - "+df.format(sp18)+"\n"+
                                        "20% - "+df.format(sp20)+"\n"+
                                        "25% - "+df.format(sp25)+"\n"+
                                        "30% - "+df.format(sp30)+"\n"+
                                        "35% - "+df.format(sp35)+"\n"+
                                        "40% - "+df.format(sp40)+"\n"+
                                        "45% - "+df.format(sp45)+"\n"+
                                        "50% - "+df.format(sp50)+"\n"+
                                        "55% - "+df.format(sp55)+"\n"+
                                        "60% - "+df.format(sp60)+"\n"+
                                        "65% - "+df.format(sp65)+"\n"+
                                        "70% - "+df.format(sp70)+"\n"
                                        );*/
            }
    }
    
    public void renderSupplierDataIntoDropDown(List<Supplier> supplierList){
        Supplier supplier = null;
        cmbSupplier.removeAllItems();
        if(supplierList!= null){
            for(int i=0; i<supplierList.size();i++){
                cmbSupplier.addItem(supplierList.get(i));
            }
            cmbSupplier.setSelectedIndex(0);
            supplier = (Supplier)cmbSupplier.getSelectedItem();            
        }
    }
    
    public void renderGstDataIntoDropDown(List<GST> gstList){
        GST gst = null;
        cmbGST.removeAllItems();
        if(gstList!= null){
            for(int i=0; i<gstList.size();i++){
                cmbGST.addItem(gstList.get(i));
            }
            cmbGST.setSelectedIndex(0);
            gst = (GST)cmbGST.getSelectedItem();            
        }  
    }
    
    public void renderCategoryDataIntoDropDown(List<ProductCategory> categoryList){
        ProductCategory productCategory = null;
        cmbCategory.removeAllItems();
        if(categoryList!= null){
            for(int i=0; i<categoryList.size();i++){
                cmbCategory.addItem(categoryList.get(i));
            }
            cmbCategory.setSelectedIndex(0);
            productCategory = (ProductCategory)cmbCategory.getSelectedItem();            
        }  
    }
    
    @Override
    public void actionPerformed(ActionEvent event) {
        try{
            JMenuItem menu = (JMenuItem) event.getSource();
           /* if (menu == mitDelete) {
                //int rowIndex = tblSupplier.getSelectedRow();
                System.out.println("--------INSIDE DELETE-"+tblSupplier.getModel().getValueAt(tblSupplier.getSelectedRow(),0));
                String supplierCode = tblSupplier.getModel().getValueAt(tblSupplier.getSelectedRow(),0).toString();
                SupplierDAO supplierDAO = new SupplierDAO();
                supplierDAO.deleteRecordByCode(supplierCode);
                initializeForm();
            } */
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnReports;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewAll;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JComboBox cmbGST;
    private javax.swing.JComboBox cmbSupplier;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblLandingPrice;
    private javax.swing.JLabel lblMrp;
    private javax.swing.JLabel lblPurchasePrice;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblReorderAt;
    private javax.swing.JLabel lblSellingPrice;
    private javax.swing.JLabel lblSellingPriceB2B;
    private javax.swing.JPanel pnlStockEntry;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtHSNCode;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtLandingPrice;
    private javax.swing.JTextField txtMrp;
    private javax.swing.JTextField txtPurchasePrice;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtReOrderAt;
    private javax.swing.JTextField txtSellingPrice;
    private javax.swing.JTextField txtSellingPriceWS;
    // End of variables declaration//GEN-END:variables
}
